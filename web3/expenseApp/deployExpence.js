const Tx = require('ethereumjs-tx');
const Web3 = require('web3');

const rpcUrl = "https://ropsten.infura.io/v3/e94d0d07e6d344de8f7bde30a57c0e7b";
const web3 = new Web3(rpcUrl);

const account = "0xF56f6C670278B8A8c7Cab226c01129298596C92A";
const privateKey = "c7bd103101284fffa97af99844e124ee68d562f14803d203586c575498d77f6c";

const byteCode = "608060405234801561001057600080fd5b50610646806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806359705f811461003b578063e484a5cb1461005a575b600080fd5b610043610076565b604051610051929190610439565b60405180910390f35b610074600480360381019061006f919061039d565b6101a7565b005b6060600060036000815481106100b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000016003600081548110610101577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001015481805461011f90610527565b80601f016020809104026020016040519081016040528092919081815260200182805461014b90610527565b80156101985780601f1061016d57610100808354040283529160200191610198565b820191906000526020600020905b81548152906001019060200180831161017b57829003601f168201915b50505050509150915091509091565b600060405180606001604052808481526020018381526020013373ffffffffffffffffffffffffffffffffffffffff1681525090506003819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001908051906020019061022492919061027d565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b82805461028990610527565b90600052602060002090601f0160209004810192826102ab57600085556102f2565b82601f106102c457805160ff19168380011785556102f2565b828001600101855582156102f2579182015b828111156102f15782518255916020019190600101906102d6565b5b5090506102ff9190610303565b5090565b5b8082111561031c576000816000905550600101610304565b5090565b600061033361032e8461048e565b610469565b90508281526020810184848401111561034b57600080fd5b6103568482856104e5565b509392505050565b60008135905061036d816105f9565b92915050565b600082601f83011261038457600080fd5b8135610394848260208601610320565b91505092915050565b600080604083850312156103b057600080fd5b600083013567ffffffffffffffff8111156103ca57600080fd5b6103d685828601610373565b92505060206103e78582860161035e565b9150509250929050565b6103fa816104db565b82525050565b600061040b826104bf565b61041581856104ca565b93506104258185602086016104f4565b61042e816105e8565b840191505092915050565b600060408201905081810360008301526104538185610400565b905061046260208301846103f1565b9392505050565b6000610473610484565b905061047f8282610559565b919050565b6000604051905090565b600067ffffffffffffffff8211156104a9576104a86105b9565b5b6104b2826105e8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156105125780820151818401526020810190506104f7565b83811115610521576000848401525b50505050565b6000600282049050600182168061053f57607f821691505b602082108114156105535761055261058a565b5b50919050565b610562826105e8565b810181811067ffffffffffffffff82111715610581576105806105b9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610602816104db565b811461060d57600080fd5b5056fea264697066735822122080ff2dabb73b80a1194646c955fdc75a6283c799a75c080811d6f3f859a4e0e964736f6c63430008040033";

let privateKeyBuffer = Buffer.from(privateKey, 'hex');
let byteCodeBuffer = Buffer.from(byteCode, 'hex');

web3.eth.getTransactionCount(account, (err, txCount) => {
    const txObject = {
        nonce: web3.utils.toHex(txCount),
        gasLimit: web3.utils.toHex(800000),
        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
        data: byteCodeBuffer
    };

    const tx = new Tx.Transaction(txObject, {chain: "ropsten"});
    tx.sign(privateKeyBuffer);
    const serializeTx = tx.serialize();
    const raw = "0x" + serializeTx.toString('hex');
    web3.eth.sendSignedTransaction(raw, (err, txHash) => {
        if(err) {
            console.log('Error => ', err);
        } else {
            console.log("txHash => ", txHash);
        }
    }).then(receipt => {
        console.log(receipt);
        console.log(receipt.contractAddress);
    });
})